/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import graphalgorithms.GraphTools;
import Algorithms.*;
/**
 *
 * @author Student
 */
public class AlgorithmMenu extends javax.swing.JPanel {

    /**
     * Creates new form AlgorithmMenu
     */
    public AlgorithmMenu() {
        initComponents();
        DFSButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        algorithmButtonGroup = new javax.swing.ButtonGroup();
        BackButton = new javax.swing.JButton();
        CycleFind = new javax.swing.JToggleButton();
        APButton = new javax.swing.JToggleButton();
        DFSButton = new javax.swing.JToggleButton();
        GoButton = new javax.swing.JButton();
        speedDropDown = new javax.swing.JComboBox();
        speedLabel = new javax.swing.JLabel();
        startVertexCheckBox = new javax.swing.JCheckBox();

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        algorithmButtonGroup.add(CycleFind);
        CycleFind.setText("Cycle Find");
        CycleFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CycleFindActionPerformed(evt);
            }
        });

        algorithmButtonGroup.add(APButton);
        APButton.setText("Aus-Parter");
        APButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                APButtonActionPerformed(evt);
            }
        });

        algorithmButtonGroup.add(DFSButton);
        DFSButton.setText("DFS");
        DFSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DFSButtonActionPerformed(evt);
            }
        });

        GoButton.setText("Go");
        GoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoButtonActionPerformed(evt);
            }
        });

        speedDropDown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Fast", "Instant" }));
        speedDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedDropDownActionPerformed(evt);
            }
        });

        speedLabel.setText("Demonstration Speed");

        startVertexCheckBox.setText("Select Own Start Vertex");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addComponent(BackButton)
                        .addGap(18, 18, 18)
                        .addComponent(GoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(CycleFind, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DFSButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(APButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(startVertexCheckBox)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(speedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(speedDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(DFSButton)
                .addGap(18, 18, 18)
                .addComponent(CycleFind)
                .addGap(18, 18, 18)
                .addComponent(APButton)
                .addGap(18, 18, 18)
                .addComponent(startVertexCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedLabel))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackButton)
                    .addComponent(GoButton))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    //private Algorithm selectedAlg = Algorithm.NULL;
    private int speed = 500;
    
    
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        GraphTools.getFrame().setPanel(this, new GraphDrawPanel());
        GraphTools.clearBuffers();
        GraphTools.drawGraph(GraphTools.getGraph());
    }//GEN-LAST:event_BackButtonActionPerformed

    private void speedDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedDropDownActionPerformed
        if((String) speedDropDown.getSelectedItem() == "Normal"){
            speed = 500;
        } else if((String) speedDropDown.getSelectedItem() == "Fast"){
            speed = 250;
        } else if((String) speedDropDown.getSelectedItem() == "Instant"){
            speed = 0;
        }
    }//GEN-LAST:event_speedDropDownActionPerformed

    private void DFSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DFSButtonActionPerformed
        
    }//GEN-LAST:event_DFSButtonActionPerformed

    private void CycleFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CycleFindActionPerformed

    }//GEN-LAST:event_CycleFindActionPerformed

    private void APButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_APButtonActionPerformed

    }//GEN-LAST:event_APButtonActionPerformed

    private void GoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoButtonActionPerformed
        
        if(!DFSButton.isSelected() && !APButton.isSelected() && !CycleFind.isSelected()){
            //error message - select algorithm.
            return;
        }
                
        Algorithm alg = null;
        
        if(DFSButton.isSelected()){
            System.out.println("DFS Not yet set up");
            return;
        } else if (CycleFind.isSelected()){
            alg = new CycleFind(speed);
        } else if (APButton.isSelected()){
            alg = new AuslanderParter(speed);
        } else {
            System.out.println("ERROR in algorithm selection");
            System.exit(0);
            return;
        }
        
        if(startVertexCheckBox.isSelected()){
            GraphTools.getFrame().setPanel(this, new StartVertexPanel(alg));
            GraphTools.drawGraph(GraphTools.getGraph());

        } else {
            alg.setStartVertex(GraphTools.getGraph().getVertex(0));
            GraphTools.getFrame().setPanel(this, new GraphAlgPanel(alg));
            GraphTools.drawGraph(GraphTools.getGraph());
            Thread t = new Thread(alg);
            t.start();
        }
        

    }//GEN-LAST:event_GoButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton APButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JToggleButton CycleFind;
    private javax.swing.JToggleButton DFSButton;
    private javax.swing.JButton GoButton;
    private javax.swing.ButtonGroup algorithmButtonGroup;
    private javax.swing.JComboBox speedDropDown;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JCheckBox startVertexCheckBox;
    // End of variables declaration//GEN-END:variables
}
