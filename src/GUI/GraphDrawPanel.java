/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import graphalgorithms.GraphTools;
import GraphPackage.*;
import java.awt.Color;
import java.awt.event.MouseEvent;

/**
 *
 * @author Student
 */
public class GraphDrawPanel extends GraphPanel {

    /**
     * Creates new form GraphDrawPanel
     */
    public GraphDrawPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HelpBox = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        SelfLoopWarning = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        MultiEdgeWarning = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        OverlapWarning = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        SubmitButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        HelpButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("To create vertices, left-click\nanywhere on the screen. To add\nan edge between two vertices,\nright click both of the vertices\nin sequence.\n\nTo clear the graph, click\nthe 'Clear' button.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout HelpBoxLayout = new javax.swing.GroupLayout(HelpBox.getContentPane());
        HelpBox.getContentPane().setLayout(HelpBoxLayout);
        HelpBoxLayout.setHorizontalGroup(
            HelpBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HelpBoxLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        HelpBoxLayout.setVerticalGroup(
            HelpBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HelpBoxLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Vertices cannot be\nadjacent to themselves.\n\nCurrently, the algorithms\ndemonstrated do not operate\non graphs with self-loops\nor multi-edges.");
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout SelfLoopWarningLayout = new javax.swing.GroupLayout(SelfLoopWarning.getContentPane());
        SelfLoopWarning.getContentPane().setLayout(SelfLoopWarningLayout);
        SelfLoopWarningLayout.setHorizontalGroup(
            SelfLoopWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        SelfLoopWarningLayout.setVerticalGroup(
            SelfLoopWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setText("Cannot add edges between\ntwo vertices which are\nalready adjacent.\n\nCurrently, the algorithms\ndemonstrated do not operate\non graphs with self-loops\nor multi-edges.");
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout MultiEdgeWarningLayout = new javax.swing.GroupLayout(MultiEdgeWarning.getContentPane());
        MultiEdgeWarning.getContentPane().setLayout(MultiEdgeWarningLayout);
        MultiEdgeWarningLayout.setHorizontalGroup(
            MultiEdgeWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        MultiEdgeWarningLayout.setVerticalGroup(
            MultiEdgeWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setText("Cannot draw vertices\ntoo closely to\neach other.");
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout OverlapWarningLayout = new javax.swing.GroupLayout(OverlapWarning.getContentPane());
        OverlapWarning.getContentPane().setLayout(OverlapWarningLayout);
        OverlapWarningLayout.setHorizontalGroup(
            OverlapWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        OverlapWarningLayout.setVerticalGroup(
            OverlapWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        HelpButton.setText("Help");
        HelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(SubmitButton)
                .addGap(18, 18, 18)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(HelpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(552, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubmitButton)
                    .addComponent(BackButton)
                    .addComponent(HelpButton)
                    .addComponent(jButton1))
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private Vertex tempVertex;
    
    private void HelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpButtonActionPerformed
        
        HelpBox.setBounds(200, 200, 200, 160);
        HelpBox.setResizable(false);
        HelpBox.setVisible(true);
        
    }//GEN-LAST:event_HelpButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        GraphTools.getFrame().setPanel(this, new StartPanel());
    }//GEN-LAST:event_BackButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
        if(evt.getButton() == MouseEvent.BUTTON1){
            
            for(int i=0;i<GraphTools.getGraph().numVertices();i++){

                    Vertex j = GraphTools.getGraph().getVertex(i);
                    
                    //Use pythagoras to avoid placing vertices too close
                    if((int) Math.sqrt( Math.pow(evt.getX() - (j.getX() + Vertex.VERTEX_RADIUS),2) + Math.pow(evt.getY() - (j.getY() + Vertex.VERTEX_RADIUS),2))  <= 2.5*Vertex.VERTEX_RADIUS){
                        OverlapWarning.setBounds(200, 200, 180, 170);
                        OverlapWarning.setResizable(false);
                        OverlapWarning.setVisible(true);
                        return;

                    }
            }
            
            Vertex v;
            GraphTools.getGraph().addVertex(v = new Vertex(evt.getX() - Vertex.VERTEX_RADIUS,evt.getY() - Vertex.VERTEX_RADIUS));
            GraphTools.drawVertex(v);
        }
           
          
        if(evt.getButton() == MouseEvent.BUTTON3){
            
            
            if (tempVertex == null){
            //grab the vertex which has been clicked
                for(int i=0;i<GraphTools.getGraph().numVertices();i++){

                    Vertex j = GraphTools.getGraph().getVertex(i);

                    if( (evt.getX() <= (j.getX()+ 2*Vertex.VERTEX_RADIUS)) && (evt.getX() >= j.getX()) && (evt.getY() <= (j.getY() + 2*Vertex.VERTEX_RADIUS)) && (evt.getY()>=j.getY())){

                        tempVertex = j;
                        GraphTools.drawVertex(j, Color.MAGENTA);
                        break;

                    }
                }

            } else {
                for(int i=0;i<GraphTools.getGraph().numVertices();i++){

                    Vertex j = GraphTools.getGraph().getVertex(i);

                    if( (evt.getX() <= (j.getX()+ 2*Vertex.VERTEX_RADIUS)) && (evt.getX() >= j.getX()) && (evt.getY() <= (j.getY() + 2*Vertex.VERTEX_RADIUS)) && (evt.getY()>=j.getY())){

                        Edge e = new Edge(tempVertex,j);
                        int result;
                        
                        if((result = GraphTools.getGraph().addEdge(e)) == 2){
                            MultiEdgeWarning.setBounds(200, 200, 180, 170);
                            MultiEdgeWarning.setResizable(false);
                            MultiEdgeWarning.setVisible(true);
                            GraphTools.drawVertex(tempVertex);
                            tempVertex = null;
                            break;
                        } else if (result == 1){
                            SelfLoopWarning.setBounds(200, 200, 180, 150);
                            SelfLoopWarning.setResizable(false);
                            SelfLoopWarning.setVisible(true);
                            GraphTools.drawVertex(tempVertex);
                            tempVertex = null;
                            break;
                        } else if (result == 0){
                            GraphTools.drawVertex(tempVertex,Color.BLACK);
                            GraphTools.drawEdge(e);
                            tempVertex = null;
                            break;
                        }

                    }
                }
                
            }
        }
        
            
    
    }//GEN-LAST:event_formMouseClicked

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        if(GraphTools.getGraph().numVertices() == 0){
            //error message
            return;
        }
        GraphTools.getFrame().setPanel(this, new AlgorithmMenu());
    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //CLEAR
        resetGraph();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JDialog HelpBox;
    private javax.swing.JButton HelpButton;
    private javax.swing.JDialog MultiEdgeWarning;
    private javax.swing.JDialog OverlapWarning;
    private javax.swing.JDialog SelfLoopWarning;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    // End of variables declaration//GEN-END:variables

private void resetGraph(){
    tempVertex = null;
    GraphTools.setGraph(new Graph());
    GraphTools.clearBuffers();
    GraphTools.drawGraph(GraphTools.getGraph());
}
    
public void finish(){
    //check validity of graph & disable/enable algortihms based on graph.
}
    


}
